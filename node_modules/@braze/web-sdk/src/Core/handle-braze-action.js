import r from"../../shared-lib/braze-shared-lib.js";import e from"../managers/braze-instance.js";import{BRAZE_ACTIONS as J,getDecodedBrazeAction as O}from"../util/braze-actions.js";import{BRAZE_ACTION_URI_REGEX as P,isValidBrazeActionJson as F}from"../util/validation-utils.js";import{WindowUtils as G}from"../util/window-utils.js";import{getUser as H}from"./get-user.js";export function _handleBrazeAction(a,s,i){if(e.rr())if(P.test(a)){const e=O(a);if(!e)return;const s=async e=>{if(!F(e))return void r.D.error(`Decoded Braze Action json is invalid: ${JSON.stringify(e,null,2)}`);const a=e[J.properties.type];if(a===J.types.ue)for(const r of e[J.properties.me])s(r);else{const s=e[J.properties.fe];let i,o;switch(a){case J.types.logCustomEvent:i=await import("./log-custom-event.js"),i.logCustomEvent.apply(null,Array.prototype.slice.call(s));break;case J.types.requestPushPermission:i=await import("../Push/request-push-permission.js"),i.requestPushPermission();break;case J.types.setEmailNotificationSubscriptionType:case J.types.setPushNotificationSubscriptionType:case J.types.setCustomUserAttribute:case J.types.addToSubscriptionGroup:case J.types.removeFromSubscriptionGroup:case J.types.addToCustomAttributeArray:case J.types.removeFromCustomAttributeArray:o=H(),o[a].apply(o,Array.prototype.slice.call(s));break;case J.types.de:case J.types.pe:G.openUri.apply(null,Array.prototype.slice.call(s));break;default:r.D.info(`Ignoring unknown Braze Action: ${a}`)}}};s(e)}else G.openUri(a,i,s)}export function handleBrazeAction(e,r){_handleBrazeAction(e,r)}